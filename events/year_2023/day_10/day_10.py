# pylint: skip-file
# flake8: noqa
# type: ignore

"""
Advent of Code - Year 2023 - Day 10
https://adventofcode.com/2023/day/10
"""

from collections import defaultdict, deque


def preprocessing(puzzle_input: str):
    loop = defaultdict(lambda: '.')
    w = puzzle_input.index('\n') + 1
    h = puzzle_input.count('\n') + 1
    start = puzzle_input.index('S')
    sx, sy = (start % w, start // w)
    
    for y, line in enumerate(puzzle_input.splitlines()):
        for x, shape in enumerate(line):
            loop[(x, y)] = shape
    x, y = sx, sy
    lp = {(x, y)}
    if loop[(x, y - 1)] in "|F7": 
        y = y - 1
        dx, dy = 0, -1
    elif loop[(x + 1, y)] in "-J7": 
        x = x + 1
        dx, dy = 1, 0
    else: 
        y = y + 1
        dx, dy = 0, 1
    cnt = 0
    while (x, y) != (sx, sy):
        lp.add((x, y))
        match loop[(x, y)]:
            case '-':
                x += dx
                cnt += 1
            case '|':
                y += dy
                cnt += 1
            case 'L':
                if dx == -1: 
                    x, y = x, y - 1
                    dx, dy = 0, -1
                else: 
                    x, y = x + 1, y
                    dx, dy = 1, 0
                cnt += 1
            case 'J':
                if dx == 1: 
                    x, y = x, y - 1
                    dx, dy = 0, -1
                else: 
                    x, y = x - 1, y
                    dx, dy = -1, 0
                cnt += 1
            case '7':
                if dx == 1: 
                    x, y = x, y + 1
                    dx, dy = 0, 1
                else: 
                    x, y = x - 1, y
                    dx, dy = -1, 0
                cnt += 1
            case 'F':
                if dx == -1: 
                    x, y = x, y + 1
                    dx, dy = 0, + 1
                else: 
                    x, y = x + 1, y
                    dx, dy = 1, 0
                cnt += 1
    return lp, loop


def solver(lp, loop):
    # yield len(lp) // 2 + (len(lp) % 2)
    yield None 
    
    minx = min(x for (x, y) in lp)
    maxx = max(x for (x, y) in lp)
    miny = min(y for (x, y) in lp)
    maxy = max(y for (x, y) in lp)

    all = 0
    to_check = set()
    for ty in range(miny, maxy + 1):
        for tx in range(minx, maxx + 1): 
            inside = True
            all += 1
            if (tx, ty) in lp: 
                inside = False
                continue
            else: 
                queue = deque([[(tx, ty)]])
                seen = set([(tx, ty)])
                
                while queue:
                    path = queue.popleft()
                    x, y = path[-1]
                    if (x, y) == (-1, -1): 
                        inside = False
                        break
                    for x2, y2 in ((x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)):
                        if (x2, y2) not in seen and (x2, y2) not in lp:
                            queue.append(path + [(x2, y2)])
                            seen.add((x2, y2))
                if inside: to_check.add((tx, ty))

    zlp = {(2 * x, 2 * y) for (x, y) in lp}
    for (x, y) in zlp.copy(): #Le groupe de S d√©pend de l'puzzle_input, todo
        if loop[(x // 2, y // 2)] in '-LSF' and loop[(x // 2 + 1 , y // 2)] in '-J7': zlp.add((x + 1, y))
        if loop[(x // 2, y // 2)] in '|F7' and loop[(x // 2, y // 2 + 1)] in '|LSJ': zlp.add((x, y + 1))

    ans = set()
    for (tx, ty) in to_check:
        inside = True
        tx = 2 * tx
        ty = 2 * ty
        queue = deque([[(tx, ty)]])
        seen = set([(tx, ty)])
        
        while queue:
            path = queue.popleft()
            x, y = path[-1]
            if (x, y) == (-1, -1): 
                inside = False
                break
            for x2, y2 in ((x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)):
                if (x2, y2) not in seen and (x2, y2) not in zlp:
                    queue.append(path + [(x2, y2)])
                    seen.add((x2, y2))
        if inside: ans.add((tx // 2, ty // 2))
    yield len(ans)

# to check {(55, 66), (89, 68), (70, 73), (71, 38), (16, 102), (107, 122), (18, 44), (111, 83), (79, 60), (92, 79), (131, 70), (123, 75), (81, 69), (81, 78), (62, 74), (58, 122), (53, 34), (62, 101), (39, 108), (74, 75), (43, 69), (66, 71), (103, 120), (31, 113), (59, 41), (64, 119), (55, 61), (24, 92), (78, 72), (59, 68), (55, 79), (70, 77), (112, 43), (83, 16), (17, 80), (46, 116), (115, 57), (15, 119), (60, 32), (52, 46), (73, 78), (20, 72), (50, 122), (74, 79), (66, 75), (55, 38), (78, 49), (134, 48), (67, 58), (29, 22), (65, 106), (76, 106), (58, 67), (69, 67), (92, 69), (69, 76), (21, 36), (58, 85), (62, 55), (81, 68), (135, 48), (42, 95), (62, 73), (74, 38), (130, 55), (109, 32), (13, 46), (96, 62), (41, 126), (126, 75), (66, 70), (64, 109), (65, 74), (126, 102), (71, 14), (80, 62), (69, 71), (15, 118), (27, 92), (73, 77), (94, 118), (33, 117), (56, 91), (65, 69), (76, 69), (96, 84), (134, 47), (68, 74), (112, 19), (99, 98), (77, 61), (14, 112), (77, 70), (21, 26), (61, 62), (69, 75), (98, 111), (104, 51), (15, 113), (27, 78), (79, 125), (81, 67), (83, 86), (63, 117), (42, 94), (12, 53), (83, 104), (94, 104), (72, 76), (44, 103), (33, 112), (107, 70), (65, 73), (134, 42), (68, 69), (120, 107), (99, 84), (86, 123), (111, 67), (69, 70), (50, 66), (61, 66), (61, 75), (23, 57), (31, 70), (72, 71), (124, 109), (55, 27), (41, 129), (47, 23), (96, 74), (74, 126), (65, 68), (111, 35), (14, 93), (68, 73), (50, 34), (14, 111), (129, 98), (113, 81), (70, 110), (31, 29), (90, 124), (106, 50), (102, 98), (83, 94), (12, 52), (23, 61), (72, 75), (64, 89), (33, 120), (68, 50), (99, 65), (49, 46), (117, 101), (120, 97), (65, 72), (22, 110), (18, 58), (129, 93), (73, 21), (63, 84), (110, 79), (82, 106), (60, 69), (95, 36), (91, 93), (75, 76), (83, 89), (29, 118), (72, 70), (128, 69), (72, 79), (64, 75), (65, 40), (22, 78), (57, 45), (111, 25), (100, 34), (50, 24), (68, 72), (49, 68), (42, 38), (71, 74), (79, 87), (29, 77), (48, 90), (31, 19), (83, 75), (75, 80), (104, 116), (106, 58), (35, 16), (72, 65), (118, 32), (56, 57), (116, 108), (99, 37), (56, 66), (128, 82), (93, 124), (49, 36), (67, 72), (70, 95), (71, 69), (63, 74), (40, 81), (115, 120), (76, 12), (49, 13), (127, 112), (45, 70), (67, 76), (70, 72), (80, 27), (59, 81), (102, 33), (133, 48), (48, 62), (71, 73), (39, 13), (77, 116), (60, 45), (131, 105), (75, 52), (61, 126), (40, 103), (10, 71), (109, 50), (108, 94), (46, 21), (51, 108), (46, 39), (67, 71), (101, 36), (13, 100), (59, 67), (26, 42), (70, 76), (28, 70), (47, 83), (78, 98), (71, 77), (63, 73), (52, 36), (77, 120), (100, 122), (42, 108), (74, 69), (74, 78), (66, 74), (34, 51), (14, 45), (129, 41), (79, 31), (26, 37), (67, 75), (118, 111), (47, 69), (59, 71), (70, 71), (90, 49), (59, 89), (100, 108), (38, 124), (112, 82), (112, 100), (124, 65), (44, 63), (128, 44), (12, 89), (39, 115), (66, 78), (22, 53), (109, 58), (38, 16), (107, 88), (67, 61), (67, 70), (17, 51), (59, 66), (70, 75), (28, 78), (102, 27), (29, 43), (41, 17), (48, 65), (21, 48), (124, 33), (68, 132), (49, 128), (135, 42), (25, 27), (21, 75), (62, 76), (73, 76), (34, 14), (19, 114), (10, 56), (74, 68), (74, 77), (66, 73), (23, 102), (76, 95), (111, 62), (34, 126), (70, 70), (77, 69), (118, 119), (40, 29), (82, 44), (69, 74), (65, 122), (15, 112), (61, 79), (68, 127), (52, 21), (81, 57), (124, 46), (73, 62), (124, 55), (73, 71), (110, 120), (42, 111), (22, 25), (75, 126), (72, 102), (118, 69), (66, 77), (84, 113), (44, 129), (13, 71), (65, 81), (119, 61), (47, 63), (71, 30), (77, 73), (69, 69), (29, 42), (115, 45), (69, 78), (61, 74), (80, 78), (79, 128), (62, 66), (81, 79), (62, 75), (73, 75), (127, 55), (114, 85), (32, 43), (85, 58), (89, 28), (51, 74), (53, 93), (78, 46), (65, 76), (16, 71), (65, 85), (100, 52), (22, 123), (86, 126), (69, 73), (61, 69), (15, 111), (101, 114), (41, 20), (93, 21), (110, 101), (73, 70), (11, 86), (53, 88), (45, 84), (65, 71), (79, 15), (68, 76), (14, 114), (132, 97), (58, 68), (69, 68), (80, 68), (69, 77), (80, 77), (61, 82), (82, 114), (122, 61), (101, 127), (30, 85), (30, 94), (41, 91), (60, 104), (72, 78), (130, 47), (126, 58), (64, 74), (106, 89), (34, 79), (56, 88), (117, 104), (118, 81), (119, 46), (109, 100), (65, 75), (68, 71), (104, 12), (121, 101), (89, 130), (61, 59), (69, 72), (11, 58), (60, 81), (75, 79), (66, 21), (83, 101), (94, 101), (35, 24), (84, 75), (64, 69), (127, 107), (126, 62), (53, 96), (25, 114), (65, 70), (76, 70), (45, 101), (121, 69), (50, 27), (68, 75), (14, 113), (121, 96), (26, 87), (80, 67), (79, 117), (40, 98), (84, 61), (35, 19), (88, 22), (72, 77), (64, 73), (99, 40), (87, 75), (119, 27), (49, 39), (120, 90), (68, 70), (61, 31), (133, 47), (113, 78), (18, 69), (71, 72), (27, 56), (39, 21), (62, 23), (47, 123), (39, 30), (71, 108), (112, 109), (75, 69), (124, 83), (75, 78), (124, 101), (127, 97), (99, 26), (37, 69), (128, 89), (92, 32), (89, 97), (55, 104), (71, 76), (55, 122), (39, 16), (82, 85), (102, 63), (110, 76), (60, 66), (41, 62), (115, 109), (64, 36), (87, 47), (84, 60), (126, 38), (64, 72), (93, 108), (49, 20), (22, 66), (108, 106), (25, 99), (77, 20), (67, 74), (97, 96), (98, 61), (96, 128), (36, 95), (67, 110), (36, 104), (71, 71), (30, 42), (92, 121), (31, 25), (59, 46), (52, 57), (75, 68), (45, 27), (75, 77), (74, 81), (54, 112), (74, 90), (37, 59), (98, 38), (78, 69), (80, 11), (59, 65), (96, 114), (101, 43), (86, 91), (69, 20), (70, 74), (118, 114), (43, 120), (66, 122), (28, 77), (99, 128), (36, 108), (71, 75), (40, 69), (122, 31), (29, 87), (40, 87), (50, 119), (25, 53), (117, 38), (64, 44), (74, 76), (20, 105), (66, 72), (62, 120), (67, 55), (51, 101), (66, 108), (67, 73), (70, 69), (100, 88), (102, 30), (9, 77), (71, 70), (21, 60), (63, 75), (73, 79), (123, 107), (34, 17), (39, 95), (64, 39), (62, 106), (74, 80), (66, 76), (13, 70), (70, 46), (43, 92)}